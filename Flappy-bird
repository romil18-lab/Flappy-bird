
interface BirdProps {
  y: number;
  velocity: number;
}

const Bird = ({ y, velocity }: BirdProps) => {
  const rotation = Math.max(-20, Math.min(20, velocity * 2));

  return (
    <div
      className="absolute transition-transform duration-100 ease-out"
      style={{
        left: 50,
        top: y,
        transform: `rotate(${rotation}deg)`,
        width: 30,
        height: 30,
      }}
    >
      {/* Bird body */}
      <div className="relative w-full h-full">
        {/* Main body */}
        <div className="absolute inset-0 bg-gradient-to-br from-yellow-300 to-yellow-500 rounded-full border-2 border-yellow-600 shadow-lg"></div>
        
        {/* Wing */}
        <div 
          className="absolute top-2 left-6 w-4 h-3 bg-gradient-to-r from-orange-400 to-orange-500 rounded-full transform origin-left animate-pulse"
          style={{ animationDuration: '0.3s' }}
        ></div>
        
        {/* Eye */}
        <div className="absolute top-1 left-2 w-3 h-3 bg-white rounded-full">
          <div className="absolute top-0.5 left-0.5 w-2 h-2 bg-black rounded-full"></div>
        </div>
        
        {/* Beak */}
        <div className="absolute top-3 -left-1 w-2 h-1 bg-orange-500 transform rotate-45 origin-right"></div>
      </div>
    </div>
  );
};

export default Bird;

import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Bird } from './Bird';
import { Pipes } from './Pipes';
import { GameUI } from './GameUI';
import { toast } from 'sonner';

export interface GameState {
  isPlaying: boolean;
  isGameOver: boolean;
  score: number;
  birdY: number;
  birdVelocity: number;
  pipes: Array<{
    id: number;
    x: number;
    gapY: number;
    passed: boolean;
  }>;
}

const GRAVITY = 0.6;
const JUMP_FORCE = -12;
const PIPE_WIDTH = 80;
const PIPE_GAP = 200;
const BIRD_SIZE = 40;

export const Game: React.FC = () => {
  const [gameState, setGameState] = useState<GameState>({
    isPlaying: false,
    isGameOver: false,
    score: 0,
    birdY: 300,
    birdVelocity: 0,
    pipes: []
  });

  const gameLoopRef = useRef<number>();
  const lastPipeRef = useRef<number>(0);

  const resetGame = useCallback(() => {
    setGameState({
      isPlaying: false,
      isGameOver: false,
      score: 0,
      birdY: 300,
      birdVelocity: 0,
      pipes: []
    });
    lastPipeRef.current = 0;
  }, []);

  const startGame = useCallback(() => {
    console.log('Starting game...');
    setGameState(prev => ({
      ...prev,
      isPlaying: true,
      isGameOver: false
    }));
    toast("Game started! Click or press space to flap!");
  }, []);

  const jump = useCallback(() => {
    if (gameState.isGameOver) {
      resetGame();
      return;
    }
    
    if (!gameState.isPlaying) {
      startGame();
    }
    
    setGameState(prev => ({
      ...prev,
      birdVelocity: JUMP_FORCE
    }));
  }, [gameState.isGameOver, gameState.isPlaying, startGame, resetGame]);

  const checkCollision = useCallback((birdY: number, pipes: GameState['pipes']) => {
    // Check ground collision
    if (birdY > 560 || birdY < 0) {
      return true;
    }

    // Check pipe collision
    const birdX = 150;
    for (const pipe of pipes) {
      if (pipe.x < birdX + BIRD_SIZE && pipe.x + PIPE_WIDTH > birdX) {
        if (birdY < pipe.gapY || birdY + BIRD_SIZE > pipe.gapY + PIPE_GAP) {
          return true;
        }
      }
    }
    return false;
  }, []);

  const gameLoop = useCallback(() => {
    setGameState(prev => {
      if (!prev.isPlaying || prev.isGameOver) {
        return prev;
      }

      let newBirdY = prev.birdY + prev.birdVelocity;
      let newBirdVelocity = prev.birdVelocity + GRAVITY;
      let newPipes = [...prev.pipes];
      let newScore = prev.score;

      // Move pipes
      newPipes = newPipes.map(pipe => ({ ...pipe, x: pipe.x - 4 }));
      
      // Remove off-screen pipes
      newPipes = newPipes.filter(pipe => pipe.x > -PIPE_WIDTH);

      // Add new pipes
      const now = Date.now();
      if (now - lastPipeRef.current > 1500) {
        const gapY = Math.random() * 300 + 100;
        newPipes.push({
          id: now,
          x: 800,
          gapY,
          passed: false
        });
        lastPipeRef.current = now;
      }

      // Check for scoring
      newPipes = newPipes.map(pipe => {
        if (!pipe.passed && pipe.x < 150 - BIRD_SIZE) {
          newScore++;
          return { ...pipe, passed: true };
        }
        return pipe;
      });

      // Check collision
      if (checkCollision(newBirdY, newPipes)) {
        console.log('Game Over! Final score:', newScore);
        toast(`Game Over! Final score: ${newScore}`);
        return {
          ...prev,
          isGameOver: true,
          isPlaying: false
        };
      }

      return {
        ...prev,
        birdY: newBirdY,
        birdVelocity: newBirdVelocity,
        pipes: newPipes,
        score: newScore
      };
    });
  }, [checkCollision]);

  useEffect(() => {
    if (gameState.isPlaying && !gameState.isGameOver) {
      gameLoopRef.current = requestAnimationFrame(gameLoop);
      return () => {
        if (gameLoopRef.current) {
          cancelAnimationFrame(gameLoopRef.current);
        }
      };
    }
  }, [gameState.isPlaying, gameState.isGameOver, gameLoop]);

  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (e.code === 'Space') {
        e.preventDefault();
        jump();
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [jump]);

  return (
    <div 
      className="relative w-full h-screen bg-gradient-to-b from-sky-400 to-sky-200 overflow-hidden cursor-pointer select-none"
      onClick={jump}
    >
      {/* Background clouds */}
      <div className="absolute inset-0">
        <div className="absolute top-20 animate-cloud-drift">
          <div className="w-24 h-16 bg-white rounded-full opacity-80"></div>
        </div>
        <div className="absolute top-40 animate-cloud-drift" style={{ animationDelay: '-10s' }}>
          <div className="w-32 h-20 bg-white rounded-full opacity-60"></div>
        </div>
      </div>

      {/* Ground */}
      <div className="absolute bottom-0 w-full h-20 bg-gradient-to-t from-green-600 to-green-400"></div>

      {/* Game elements */}
      <Bird y={gameState.birdY} isFlapping={gameState.isPlaying} />
      <Pipes pipes={gameState.pipes} />
      <GameUI 
        score={gameState.score}
        isGameOver={gameState.isGameOver}
        isPlaying={gameState.isPlaying}
        onStart={startGame}
        onRestart={resetGame}
      />
    </div>
  );
};

import React from 'react';
import { Button } from '@/components/ui/button';
import { Play, RotateCcw } from 'lucide-react';

interface GameUIProps {
  score: number;
  isGameOver: boolean;
  isPlaying: boolean;
  onStart: () => void;
  onRestart: () => void;
}

export const GameUI: React.FC<GameUIProps> = ({
  score,
  isGameOver,
  isPlaying,
  onStart,
  onRestart
}) => {
  return (
    <>
      {/* Score */}
      <div className="absolute top-8 left-1/2 transform -translate-x-1/2 z-20">
        <div className="text-6xl font-bold text-white drop-shadow-lg animate-float">
          {score}
        </div>
      </div>

      {/* Start screen */}
      {!isPlaying && !isGameOver && (
        <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 z-30">
          <div className="text-center text-white">
            <h1 className="text-6xl font-bold mb-4 animate-float">Flappy Fly</h1>
            <p className="text-xl mb-8 opacity-90">Click or press Space to flap!</p>
            <Button 
              onClick={onStart}
              size="lg"
              className="bg-yellow-500 hover:bg-yellow-600 text-black font-bold py-4 px-8 rounded-full shadow-lg transform transition-transform hover:scale-105"
            >
              <Play className="mr-2 h-6 w-6" />
              Start Game
            </Button>
          </div>
        </div>
      )}

      {/* Game over screen */}
      {isGameOver && (
        <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 z-30">
          <div className="text-center text-white bg-white bg-opacity-10 backdrop-blur-sm rounded-2xl p-8 border border-white border-opacity-20">
            <h2 className="text-5xl font-bold mb-4 text-red-400">Game Over!</h2>
            <p className="text-2xl mb-2">Final Score</p>
            <p className="text-4xl font-bold mb-6 text-yellow-400">{score}</p>
            <Button 
              onClick={onRestart}
              size="lg"
              className="bg-green-500 hover:bg-green-600 text-white font-bold py-4 px-8 rounded-full shadow-lg transform transition-transform hover:scale-105"
            >
              <RotateCcw className="mr-2 h-6 w-6" />
              Play Again
            </Button>
            <p className="text-sm mt-4 opacity-75">Click anywhere to restart</p>
          </div>
        </div>
      )}

      {/* Instructions during gameplay */}
      {isPlaying && score === 0 && (
        <div className="absolute bottom-32 left-1/2 transform -translate-x-1/2 z-20">
          <div className="text-white text-center bg-black bg-opacity-30 rounded-lg px-4 py-2">
            <p className="text-lg font-semibold">Click or Space to flap!</p>
          </div>
        </div>
      )}
    </>
  );
};

import React from 'react';

interface Pipe {
  id: number;
  x: number;
  gapY: number;
  passed: boolean;
}

interface PipesProps {
  pipes: Pipe[];
}

export const Pipes: React.FC<PipesProps> = ({ pipes }) => {
  return (
    <>
      {pipes.map((pipe) => (
        <div key={pipe.id}>
          {/* Top pipe */}
          <div
            className="absolute bg-gradient-to-r from-green-600 to-green-500 shadow-lg"
            style={{
              left: `${pipe.x}px`,
              top: '0px',
              width: '80px',
              height: `${pipe.gapY}px`,
              borderRadius: '0 0 8px 8px'
            }}
          >
            {/* Pipe cap */}
            <div className="absolute -bottom-4 -left-2 w-20 h-8 bg-gradient-to-r from-green-700 to-green-600 rounded-lg"></div>
          </div>
          
          {/* Bottom pipe */}
          <div
            className="absolute bg-gradient-to-r from-green-600 to-green-500 shadow-lg"
            style={{
              left: `${pipe.x}px`,
              top: `${pipe.gapY + 200}px`,
              width: '80px',
              height: `${600 - pipe.gapY - 200}px`,
              borderRadius: '8px 8px 0 0'
            }}
          >
            {/* Pipe cap */}
            <div className="absolute -top-4 -left-2 w-20 h-8 bg-gradient-to-r from-green-700 to-green-600 rounded-lg"></div>
          </div>
        </div>
      ))}
    </>
  );
};

import { Game } from "@/components/Game";

const Index = () => {
  return (
    <div className="w-full h-screen">
      <Game />
    </div>
  );
};

export default Index;

import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				}
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				},
				'bird-flap': {
					'0%, 100%': { transform: 'rotate(-10deg)' },
					'50%': { transform: 'rotate(10deg)' }
				},
				'pipe-move': {
					'0%': { transform: 'translateX(0)' },
					'100%': { transform: 'translateX(-100vw)' }
				},
				'cloud-drift': {
					'0%': { transform: 'translateX(100vw)' },
					'100%': { transform: 'translateX(-200px)' }
				},
				'float': {
					'0%, 100%': { transform: 'translateY(0px)' },
					'50%': { transform: 'translateY(-10px)' }
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'bird-flap': 'bird-flap 0.3s ease-in-out infinite',
				'pipe-move': 'pipe-move 3s linear infinite',
				'cloud-drift': 'cloud-drift 20s linear infinite',
				'float': 'float 2s ease-in-out infinite'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;
